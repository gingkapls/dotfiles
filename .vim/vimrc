" UI {{
set nu rnu
set ruler
set mouse=a
set title
set splitbelow
set splitright
" }}

" Search {{
set hlsearch
set ignorecase
set smartcase
set path+=**
set wildmenu
set incsearch
set infercase
" }}

" Text {{
set display+=truncate
set encoding=utf-8
set linebreak
set wrap
syntax on
set spelllang=en_us,en_gb
set spell
set ai
set tabstop=4
set shiftwidth=4
set expandtab
set scrolloff=999
set backspace=indent,eol,start
" }}

" Commands {{
command WC :silent w! /tmp/vimword | :r !echo Word Count: (cat /tmp/vimword | wc -w)
command DATE :r !printf "\%s \%s" "\#\#" (date)
" }}

" Functions {{
function Test() range 
  let current_pos = getpos(".")
  echo system('echo '.shellescape(join(getline(a:firstline, a:lastline), "\r")).'| wl-copy')
  echo "yanked to clipboard"
  call setpos(".", current_pos)
endfunction
" }}

" Bindings {{
let mapleader= " "
vnoremap <Leader>y :'<,'> call Test() <CR>
nnoremap <silent> <Leader>p :r !wl-paste --no-newline 2>/dev/null<CR>
nnoremap <silent> <Leader>P :r !wl-paste -p --no-newline 2>/dev/null<CR>
inoremap <silent> \p <C-o>:r !wl-paste --no-newline 2>/dev/null<CR>
inoremap <silent> \P <C-o>:r !wl-paste -p --no-newline 2>/dev/null<CR>
nmap Y y$

" Buffers
nnoremap ;n :bn<CR>
nnoremap ;p :bp<CR>
nnoremap ;d :bd<CR>
nnoremap ;<Tab> :bn <CR>
nnoremap <silent> ;l :noh <CR> 
nnoremap <Leader>c :r !
nnoremap <Leader>g :Goyo <CR>
nnoremap <Leader>z xu/<C-R>-<CR>
nnoremap <Leader>x xu:%s/<C-R>-//g<CR>
nnoremap \. f.a<CR><ESC>
nnoremap \w :w <CR>
nnoremap \q :q<CR>

" Navigation
nnoremap k gk
nnoremap j gj
nnoremap <Leader>h <C-W><C-H>
nnoremap <Leader>j <C-W><C-J>
nnoremap <Leader>k <C-W><C-K>
nnoremap <Leader>l <C-W><C-L>
nnoremap <silent> <Leader>e :Vexplore 15<CR>

" Tabs
nnoremap <Tab> gt
nnoremap <Leader><Tab> gT
nnoremap <Leader>t :tabedit
nnoremap <Leader>v :vsplit
nnoremap <Leader>s :split
nnoremap <silent> <Leader><t_KI> :vertical res +5 <CR>
nnoremap <silent> <Leader><t_KG> :vertical res -5 <CR>
nnoremap <silent> <Leader><t_KE> :res -5 <CR>
nnoremap <silent> <Leader><t_KK> :res +5 <CR>
nnoremap <silent> <Leader>r <C-W>R

" }}

" Airline {{
" set fillchars+=vert:│ 
let g:airline_extensions = ["tabline"]

" air-line 
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline#extensions#tabline#enabled = 1

" }}

" Backups {{
set backup
set backupdir=~/.vim/backup/
set writebackup
set backupcopy=no
au BufWritePre * let &bex = '@' . strftime("%F.%H:%M")
set confirm
set dir=~/.cache/vim

" }}

" Limelight {{
autocmd! User GoyoEnter Limelight0.6
autocmd! User GoyoLeave Limelight!
" }}

" Tab autocompletion {{
function! InsertTabWrapper(arg)
	let col = col('.') - 1
	if !col || getline('.')[col - 1] !~ '\k'
		return "\<tab>"
	else
		if a:arg == "1" 
				return "\<c-p>"
		else
				return "\<c-n>"
		endif
	endif
endfunction
" }}

" Folds {{
autocmd BufWinLeave *.* mkview!
autocmd BufWinEnter *.* silent loadview 
" }}

" Ultisnips {{
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsEditSplit="vertical"
" }}

" Plugins {{
call plug#begin()
Plug 'vim-airline/vim-airline'
Plug 'lervag/vimtex', { 'for': 'tex' }
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
" Plug 'vim-airline/vim-airline-themes'
call plug#end()
" }}

" Colors {{
colorscheme base16-generated
" }}
